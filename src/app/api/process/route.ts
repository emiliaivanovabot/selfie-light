import { NextRequest, NextResponse } from "next/server";
import { processImageWithFAL } from "@/lib/fal";
import { readFile } from "fs/promises";
import { join } from "path";

export async function POST(request: NextRequest) {
  try {
    const { selfieUrl, referenceUrl, prompt, promptIndex, selectedScenes } = await request.json();

    if (!selfieUrl || !referenceUrl) {
      return NextResponse.json({
        error: "Both selfie URL and reference URL are required"
      }, { status: 400 });
    }

    // Helper function to handle base64 data URLs, HTTP URLs, and local file paths
    const processImageUrl = async (imageUrl: string): Promise<string> => {
      // If it's already a base64 data URL, return as-is
      if (imageUrl.startsWith('data:')) {
        console.log("Using base64 data URL directly");
        return imageUrl;
      }

      // If it's an HTTP/HTTPS URL (e.g., Vercel Blob Storage), return as-is
      if (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) {
        console.log("Using HTTP URL directly:", imageUrl);
        return imageUrl;
      }

      // If it's a local file path, convert to base64
      const filePath = join(process.cwd(), "public", imageUrl);

      try {
        const fileBuffer = await readFile(filePath);
        const extension = imageUrl.split('.').pop()?.toLowerCase();
        let mimeType = "image/jpeg"; // default
        if (extension === "png") mimeType = "image/png";
        else if (extension === "gif") mimeType = "image/gif";
        else if (extension === "webp") mimeType = "image/webp";

        const base64String = fileBuffer.toString('base64');
        console.log(`Converted local file ${imageUrl} to base64`);
        return `data:${mimeType};base64,${base64String}`;
      } catch (fileError) {
        console.error("File read error for", imageUrl, ":", fileError);
        throw new Error(`Could not read file: ${imageUrl}`);
      }
    };

    // Process both images (handle both base64 and file paths)
    const selfieDataUrl = await processImageUrl(selfieUrl);
    const referenceDataUrl = await processImageUrl(referenceUrl);

    console.log("Processing with FAL.ai:", {
      selfieType: selfieUrl.startsWith('data:') ? "base64 data URL" : "local file converted to base64",
      referenceType: referenceUrl.startsWith('data:') ? "base64 data URL" : "local file converted to base64",
      selfieDataLength: selfieDataUrl.length,
      referenceDataLength: referenceDataUrl.length,
      prompt: prompt || "Using two reference photos (person A, person B), create a selfie style image where both are smiling and standing close together. Lighting: soft golden hour sunlight, warm tones. Background: beach at sunset with gentle waves. Both are looking at the camera. Maintain facial features, skin tone, hairstyle from the reference photos. High detail, photorealistic, slight depth of field, vertical format (9:16)."
    });

    // Process both images with FAL.ai nano-banana/edit API
    const result = await processImageWithFAL(
      selfieDataUrl,
      referenceDataUrl,
      prompt,
      promptIndex,
      selectedScenes
    );

    console.log("FAL.ai raw result:", result);

    // Transform FAL.ai response format to match frontend expectations
    // FAL.ai returns: { images: [{ url, width?, height? }] }
    // Frontend now expects: { images: [{ url, width, height }] }
    if (!result.images || result.images.length === 0) {
      throw new Error("No images generated by FAL.ai");
    }

    const transformedResult = {
      images: result.images.map(img => ({
        url: img.url,
        width: img.width || 512,
        height: img.height || 512
      }))
    };

    console.log("Transformed result:", transformedResult);

    return NextResponse.json({
      success: true,
      result: transformedResult
    });

  } catch (error) {
    console.error("Processing error:", error);

    // Enhanced error response with details for debugging
    let errorMessage = "Failed to process image";
    let errorDetails: Record<string, unknown> = {};

    if (error instanceof Error) {
      errorMessage = error.message;
      errorDetails = {
        name: error.name,
        message: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      };
    }

    // Check for specific FAL.ai validation errors
    if (error && typeof error === 'object' && 'status' in error) {
      if (error.status === 422) {
        errorMessage = "Validation error: Please check image URL format and parameters";
        errorDetails.status = 422;
        errorDetails.type = "ValidationError";
      }
    }

    console.error("Detailed error info:", errorDetails);

    return NextResponse.json(
      {
        error: errorMessage,
        details: process.env.NODE_ENV === 'development' ? errorDetails : undefined
      },
      { status: 500 }
    );
  }
}